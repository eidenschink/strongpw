#!/usr/bin/env python3
"""Generate a strong password.

Usage: strongpw (-h | --help)
       strongpw (-v | --version)
       strongpw [--no-punctuation]
       strongpw [--no-punctuation] <n>
       strongpw [-r <n>] [-l <n>] [-d <chars>] [--no-punctuation] [--check-pwned] [-t <target>]
       strongpw --list-targets

Options:
 -v --version           Version of the program.
 -h --help              Show this screen.
 -r --repeat <n>        Create strong passwords n-time one per line [default: 1].
 -l --length <n>        Length of password to be created [default: 12].
 -p --no-punctuation    Create password without punctuation strings [default: false].
 -t --target <target>   The host, provider or system the password is to be created for.
 -d --delete-chars=<chars> Remove characters from the set of characters to generate passwords. [default: ''].
 -c --check-pwned       Utilize the haveibeenpwned.com API to check if the password is already known [default: false].
 --list-targets         Display a list of available targets


Example:
 # create a strong 20 character password.
 strongpw 20 

 # create a not so strong password most services will accept.
 strongpw 20 --no-punctuation

 # create very strong passwords for 500 "friends" on social media.
 strongpw -r 500 -l 30

"""

from secrets import choice
from docopt import docopt
import string
import sys
import re

targets = {
    'hosteurope_ssh': '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_!&%()=/+#.,;-<>?@*{}[]:\\^| ',
    'test_weak_alphabet': 'abcdefghijk',
}

def is_upper_lower_digit(alphabet):
    return any(element.isupper() for element in alphabet) \
        and any(element.islower() for element in alphabet) \
        and any(element.isdigit() for element in alphabet)

def generate_password(length=12, chars=None, remove_chars=None, pwned=False):
    """
    Return a fixed length string suitable as a password, based on 
    a randomized default or given character set.
    """
    if not chars:
        chars = string.ascii_letters + string.digits + string.punctuation + " "

    if remove_chars:
        chars = [el for el in chars if el not in list(remove_chars)]

    # If the number of unique elements is hardly more than a set of digits, bark.
    if len(set(list(chars))) < 12:
        raise ValueError('Your alphabet contains not enough characters.')
        
    can_mix = is_upper_lower_digit(chars)

    # http://www.cs.duke.edu/~ola/patterns/plopd/loops.html#loop-and-a-half
    while True:
        strongpw = ''.join([choice(chars) for i in range(length)])

        # some projects trim whitespace, so avoid leading and trailing.
        if strongpw.startswith(' ') or strongpw.endswith(' '):
            continue

        # Make sure we don't have consecutive chars
        if not re.findall(r"(.)\1", strongpw):
            # If the alphabet allows: support at least one lower and upper character + one digit
            if can_mix and not is_upper_lower_digit(strongpw):
                continue
            if pwned:
                if is_pwned(strongpw):
                    continue
            # otherwise we're done.
            break

    return strongpw

def is_pwned(password):
    """
    Verify the generated password is not already a known password as far as the Pwned Passwords
    service can tell.
    Pwned Passwords are more than half a billion passwords which have previously been exposed in data breaches.
    See https://haveibeenpwned.com/API/v3#PwnedPasswords
    """
    import hashlib
    import requests
    password_sha1 = hashlib.sha1(password.encode()).hexdigest().upper()
    k_anon = password_sha1[0:5]
    k_anon_suffix = password_sha1[5:]
    api_result = requests.get('https://api.pwnedpasswords.com/range/' + k_anon)
    if api_result.status_code != 200:
        raise Exception('Validation by pwnedpasswords API failed.')
    content = api_result.text.split()
    if any(ele.startswith(k_anon_suffix) for ele in content):
        #for ele in content:
            #if ele.startswith(k_anon_suffix):
            #    print("{} found {} times in pwnedpasswords dataset.".format(password, ele.split(':')[1]))
            #    return True
        return True
    return False    

def main(docargs):
    """Dispatch the work based on arguments."""
    chars = None
    password_length = int(docargs['<n>'] or docargs['--length'])

    if docargs['--list-targets']:
        for target in targets:
            print(target)
        return 0

    # http://blog.codinghorror.com/your-password-is-too-damn-short/
    if password_length < 12:
        print('Your password is too damn short.')
        return 1

    remove_chars = docargs['--delete-chars']

    if docargs['--no-punctuation']:
        chars = string.ascii_letters + string.digits + " "

    if docargs['--target']:
        args_target = docargs['--target']
        if args_target in targets:
            chars = targets[args_target]
        else:
            print("Unknown target.")
            return 2

    for i in range(int(docargs['--repeat'])):
        print(generate_password(
            password_length,
            chars,
            remove_chars,
            docargs['--check-pwned']))


if __name__ == "__main__":
    sys.exit(main(docopt(__doc__, version='strongpw 2.0')))
