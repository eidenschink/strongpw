#!/usr/bin/env python3
"""Generate a strong password.

Usage:
  strongpw (-h | --help)
  strongpw (-v | --version)
  strongpw [--no-punctuation] [--length=<n>] [--repeat=<n>] [--delete-chars=<chars>] [--check-pwned] [--target=<target>]
  strongpw --list-targets

Options:
  -v --version           Version of the program.
  -h --help              Show this screen.
  -r --repeat=<n>        Create strong passwords n-times, one per line [default: 1].
  -l --length=<n>        Length of password to be created [default: 12].
  -p --no-punctuation    Create password without punctuation [default: False].
  -t --target=<target>   The host, provider or system the password is to be created for.
  -d --delete-chars=<chars> Remove characters from the set of characters to generate passwords. [default: ''].
  -c --check-pwned       Utilize the haveibeenpwned.com API to check if the password is already known [default: False].
  --list-targets         Display a list of available targets

Examples:
  strongpw --length=20
  strongpw --length=20 --no-punctuation
  strongpw --repeat=500 --length=30
"""

import hashlib
import string
import sys
import re
import logging
from secrets import choice
from typing import Dict, Optional
import requests
import argparse

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

TARGETS: Dict[str, str] = {
    'hosteurope_ssh': string.ascii_letters + string.digits + "$_!&%()=/+#.,;-<>?@*{}[]:\\^| ",
    'test_weak_alphabet': 'abcdefghijk',
}

def is_upper_lower_digit(alphabet: str) -> bool:
    """Check if the string contains at least one uppercase, one lowercase, and one digit."""
    has_upper = has_lower = has_digit = False
    for char in alphabet:
        if char.isupper():
            has_upper = True
        elif char.islower():
            has_lower = True
        elif char.isdigit():
            has_digit = True
        if has_upper and has_lower and has_digit:
            return True
    return False

def generate_password(length: int = 12, chars: Optional[str] = None, remove_chars: Optional[str] = None, pwned: bool = False, session: Optional[requests.Session] = None) -> str:
    """
    Generate a strong password with the specified constraints.
    """
    if not chars:
        chars = string.ascii_letters + string.digits + string.punctuation + " "

    if remove_chars:
        chars = ''.join(c for c in chars if c not in remove_chars)

    unique_chars = set(chars)
    if len(unique_chars) < 12:
        raise ValueError('Your alphabet contains not enough unique characters.')

    can_mix = is_upper_lower_digit(chars)
    max_api_attempts = 10

    for attempt in range(max_api_attempts):
        strongpw = ''.join(choice(chars) for _ in range(length))

        if strongpw.startswith(' ') or strongpw.endswith(' '):
            continue

        if re.search(r"(.)\1", strongpw):
            continue

        if can_mix and not is_upper_lower_digit(strongpw):
            continue

        if pwned:
            if is_pwned(strongpw, session):
                logging.warning(f"Password '{strongpw}' has been pwned. Regenerating...")
                continue

        return strongpw

    raise RuntimeError('Failed to generate a strong password after multiple attempts.')

def is_pwned(password: str, session: Optional[requests.Session] = None) -> bool:
    """
    Check if the password has been exposed in data breaches using the HaveIBeenPwned API.
    """
    password_sha1 = hashlib.sha1(password.encode()).hexdigest().upper()
    prefix, suffix = password_sha1[:5], password_sha1[5:]
    headers = {'Add-Padding': 'true'}

    try:
        if session:
            response = session.get(f'https://api.pwnedpasswords.com/range/{prefix}', headers=headers)
        else:
            response = requests.get(f'https://api.pwnedpasswords.com/range/{prefix}', headers=headers)
        response.raise_for_status()
    except requests.RequestException as e:
        logging.error(f"API request failed: {e}")
        raise Exception('Validation by pwnedpasswords API failed.') from e

    hashes = response.text.splitlines()
    for line in hashes:
        hash_suffix, count = line.split(':')
        if hash_suffix == suffix and int(count) > 0:
            return True
    return False

def parse_arguments() -> argparse.Namespace:
    """Parse command-line arguments using argparse."""
    parser = argparse.ArgumentParser(description="Generate a strong password.")
    parser.add_argument('-v', '--version', action='version', version='strongpw 2.0')
    parser.add_argument('-r', '--repeat', type=int, default=1, help='Number of passwords to generate [default: 1]')
    parser.add_argument('-l', '--length', type=int, default=12, help='Length of password to be created [default: 12]')
    parser.add_argument('-p', '--no-punctuation', action='store_true', help='Create password without punctuation [default: False]')
    parser.add_argument('-t', '--target', type=str, help='The host, provider or system the password is to be created for.')
    parser.add_argument('-d', '--delete-chars', type=str, default='', help='Remove characters from the set of characters to generate passwords.')
    parser.add_argument('-c', '--check-pwned', action='store_true', help='Check if the password has been pwned [default: False]')
    parser.add_argument('--list-targets', action='store_true', help='Display a list of available targets')

    return parser.parse_args()

def main():
    args = parse_arguments()

    if args.list_targets:
        for target in TARGETS:
            print(target)
        sys.exit(0)

    password_length = args.length

    if password_length < 12:
        logging.error('Your password is too short. Minimum length is 12.')
        sys.exit(1)

    remove_chars = args.delete_chars

    if args.no_punctuation:
        chars = string.ascii_letters + string.digits + " "
    else:
        chars = string.ascii_letters + string.digits + string.punctuation + " "

    if args.target:
        if args.target in TARGETS:
            chars = TARGETS[args.target]
        else:
            logging.error("Unknown target specified.")
            sys.exit(2)

    session = requests.Session() if args.check_pwned else None

    try:
        for _ in range(args.repeat):
            password = generate_password(
                length=password_length,
                chars=chars,
                remove_chars=remove_chars,
                pwned=args.check_pwned,
                session=session
            )
            print(password)
    except Exception as e:
        logging.error(e)
        sys.exit(3)
    finally:
        if session:
            session.close()

if __name__ == "__main__":
    main()
